# -*- coding: utf-8 -*-
"""Sub1_MLTerapan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mJ3nx2JBSInlpZuae4z8q5nx2op1Px7Z

#<center> PROFIL DICODING </center><hr>
Nama   : Sarah Salsabila

Email  : m314v4331@dicoding.org

Alamat : Karawang , Jawabarat

##<center>Predictive Analytics </center><hr>

## Domain Proyek
Pada tugas Prediktif Analisis ini saya menggunakan domain Kesehatan .
Untuk lebih spesifik saya menggunakan domain Kesehatan mengenai Diabetes pada wanita .
![Diabetes](https://www.domino206lounge.com/wp-content/uploads/2020/03/403-1210x642.jpg)
-   Diabetes merupakan penyakit gangguan metabolik yang ditandai dengan kenaikan gula darah akibat penurunan sekresi insulin oleh sel beta pankreas atau penurunan fungsi insulin .
    Berdasarkan Kementrian Kesehatan ,Indonesia memilki jumlah pengidap diabetes sebanyak 10 juta atau 6,9% . Menurut data tahun 2015 , Kasus diabetes yang terdeteksi di dunia berdasarkan gender pada pria sebanyak 215,2 juta dan pada wanita sebanyak 199,5 juta . 
    Berdasarkan IDF ATLAS edisi ke-7 pada tahun 2015 , Indonesia menempati Posisi ke -7 sebagai 10 negara dengan jumlah orang dewasa yang terkena diabetes . 
  Berdasarkan 10 penyebab kematian utama dengan sistem sample registrasion Indonesia pada tahun 2014 , diabetes menempati posisi ke -4 sebagai penyebab kematian terbanyak dengan persentase 6,7%.
-   Alasan dibalik pemilihan domain adalah karena berdasarkan penelitian, Diabetes menjadi penyebab penyakit jantung yang sering ditemukan pada wanita daripada pria .
    Berdasarkan Hasil Riset Kesehatan Dasar pada tahun 2013 , proporsi diabetes pada wanita cenderung lebih tinggi yaitu (7,7%) dibandingkan dengan pria yang hanya (5,6%) . Selanjutnya berdasarkan Riskesdas 2013 dari sebanyak 6,9% orang yang memiliki diabetes , 69,5% diantaranya tidak terdiagnosis . 
    Diabetes merupakan penyebab utama kematian no.9 pada wanita ditingkat global,menyebabkan 2,1 juta kematian setiap tahunnya. Saat ini terdapat lebih dari 199 juta wanita hidup dengan diabetes dan diproyeksikan akan meningkat menjadi 313 juta pada tahun 2040. Dan menurut riset , Wanita yang mengidap Diabetes memiliki potensi kesulitan yang lebih besar pada proses kehamilan serta wanita yang memiliki diabetes dapat berdampak buruk terhadap kehamilannya . 
    Oleh sebab itu Masalah ini harus segera ditindak guna membantu mengurangi tingkat diabetes pada wanita di Indonesia .


Untuk Informasi lebih lanjut mengenai Diabetes pada wanita , berikut terdapat beberapa Jurnal yang relevan serta Riset mengenai Diabetes pada wanita .

- [Wanita dan Diabetes oleh Kementerian Kesehatan Republik Indonesia](http://p2ptm.kemkes.go.id/uploads/VHcrbkVobjRzUDN3UCs4eUJ0dVBndz09/2017/11/Dr_HM_Subuh_MPPM_Woman_Diabetes.pdf)

- [GAMBARAN KARAKTERISTIK DAN FAKTOR-FAKTOR YANG BERHUBUNGAN DENGAN KEJADIAN DIABETES MELITUS TIPE 2PADA WANITA](https://ejournal3.undip.ac.id/index.php/jkm/article/view/11772/11427)

- [ANALISIS FAKTOR risiko PENYEBAB TERJADINYADIABETESMELITUS TIPE 2 PADA WANITA USIA PRODUKTIFDIPUSKESMASWAWONASA](https://ejournal.unsrat.ac.id/index.php/ebiomedik/article/view/4554/4082)

## Business Understanding
Berdasarkan pemaparan pada domain proyek mengenai Diabetes pada wanita . Sebagai wanita saya memiliki keinginan untuk mengenal lebih dalam mengenai diabetes, Dengan tujuan untuk membantu wanita agar dapat melakukan pencegahan terhadap penyakit Diabetes , seperti sebuah pepatah yang mengatakan bahwa
> Tak Kenal maka Tak Sayang 
> -unknown
 
Juga saya pernah mendengar istilah ,
 
> Dalam menghadapi musuh , tak ada yang lebih mengena daripada senjata kasih sayang
> -Cut Nyak Dien

Dan yang terakhir 
 
![Quotes](https://jagokata.com/images/upload/margaret-thatcher-butuh-pengorbanan-lebih-dalam-mengenal-musuh-karena.jpg)
 
Istilah serta pepatah tersebut mengajarkan kita untuk melakukan sebuah pengorbanan. Pada kasus ini, dengan cara mengenal lebih dalam apa itu diabetes , apa saja penyebab diabetes, bagaimana ciri - ciri diabetes .
Sehingga kita dapat melakukan upaya pencegahan sebagai bukti bahwa kita menyayangi diri kita sendiri dan agar terhindar dari penyakit diabetes, berdasarkan faktor - faktor diabetes nantinya .

### Problem Statements
Berdasarkan fakta bahwa Diabetes merupakan salah satu penyebab kematian tertinggi dan banyaknya kasus di mana para pengidap diabetes tidak terdeteksi sebelumnya .Serta berdasarkan Riset di mana Wanita memiliki potensi yang lebih tinggi terkena penyakit Diabetes dibandingkan pria. Membuat saya berpikir ,
 
    1. Apa saja Faktor yang berpengaruh terhadap penyakit Diabetes?
    2. Faktor mana yang menyebabkan kemungkinan tertinggi seseorang memiliki penyakit Diabetes ?
    3. Apa saja ciri - ciri seseorang yang mengidap penyakit Diabetes ?
    4. Apakah ada suatu cara untuk mengetahui seseorang terkena Diabetes atau tidak ?

### Goals
Untuk  menjawab pertanyaan tersebut, saya mencoba membuat predictive analisis dengan tujuan atau goals sebagai berikut:
- Mengetahui faktor apa saja yang memiliki korelasi dengan pengidap Diabetes
- Mengetahui fitur atau faktor yang memiliki korelasi paling tinggi dengan Pasien yang mengidap Diabetes.
- Mengetahui ciri - ciri seseorang  yang mengidap penyakit diabates 
- Membuat model machine learning yang dapat memprediksi seseorang apakah mengidap diabetes dengan seakurat mungkin berdasarkan fitur-fitur yang ada.

### Solution statements
Untuk mencapai tujuan serta dapat menyelesaikan permasalahan pada problem statement , yaitu melakukan prediksi untuk mengetahui seorang wanita mengidap Diabetes atau tidak . di mana ini merupakan permasalahan klasifikasi . 
Saya menggunakan beberapa metode ,Diantaranya 
1. Untuk mengetahui Faktor yang berpengaruh pada seorang pasien Diabetes , saya akan menggunakan Diagram Persebaran Data . di mana dari diagram ini kita dapat memperoleh informasi menegenai persebaran data pada setiap variabel .
2. Selanjutnya melakukan Correlation Matrix pada fitur numerik, dari correlation matrix ini kita dapat melihat korelasi setiap variabel yang ditampilkan dengan perbedaan gradien warna . di mana makin dekat nilai dengan angka 1 maka variabel tersebut memiliki korelasi yang tinggi , sebaliknya jika variabel menujukan angka makin dekat dengan 0 maka variabel tersebut memiliki korelasi yang rendah dengan variabel tertentu.
3. Melakukan perbandingan dalam membaca data dengan menggunakan beberapa diagram.
 
    - Diagram Bar , untuk melihat seperti apakah korelasi antara "Hasil" dengan setiap Variabel.
    - Diagram Box , untuk mendapatkan informasi lebih jelas terkait rentang korelasi antara "Hasil" dengan setiap variabel.
    - Melakukan pengurutan nilai variable dengan menggunakan fungsi data.corr , serta nilai akan diururtkan secara ascending false
    - Melakukan perbandingan korelasi setiap variable berdasarkan nilai rata-rata variabel tersebut.
    - Untuk mengembangkan model machine learning, di sini saya menggunakan 4 algoritma.
      1.  K-Nearest Neighbor
      2.  Random Forest
      3.  Boosting Algorithm
      4.  Support Vector Machine
 
 
di mana Pada urutan 1-3 nanti, akan dilakukan evaluasi performa masing-masing algoritma dan menentukan algoritma mana yang dapat memberikan prediksi terbaik (nilai paling mendekati).
 
Pada algoritma ke -4 ,Saya melakukan evaluasi dengan menggunakan sistem nilai akurasi , untuk  memastikan apakah model SVM dapat menghasilkan nilai akurasi yang tinggi ketika memprediksi dataset .

Pada Submission 1 , Machine learning terapan ini saya menggunakan dataset dari Kaggle .<br>
> link dataset : " https://www.kaggle.com/uciml/pima-indians-diabetes-database "

Dataset ini berasal dari National Institute of Diabetes and Digestive and Kidney Diseases . dimana data berisikan tentang apakah pasien wanita mempunyai diabetes atau tidak . 
data ini memiliki beberapa variable diantaranya : 
1. Pregnancies(Kehamilan) : untuk menghitung berapa kali dia pernah Mengandung
2. Glucose(Glukosa) : konsentrasi glukosa dalam rentang waktu 2 jam berdasarkan tes toleransi oral glukosa
3. Blood Pressure(Tekanan Darah) : tekanan darah diastolik (mm Hg)
4. Skin Thickness (Ketebalan Kulit) : ketebalan kulit bagian trisep (mm)
5. Insulin : tingkat insulin 2 jam insulin serum dalam satuan mu U/ml)
6. BMI : indeks massa tubuh (kg/m^2)
7. DiabetesPedigreeFunction : indikator riwayat diabetes dalam keluarga
8. Age(Umur) : umur wanita suku indian pima (tahun)
9. Outcome(Hasil) : kategori apakah 1(true, diabetes) atau 0 (false, tidak diabetes)

## Data Understanding
Data yang digunakan untuk proyek ini adalah sebuah data yang berasal dari National Institute of Diabetes dan Digestive dan Kidney Diseases . di mana data berisikan pasien wanita pima India yang memiliki diabetes dan tidak .
Untuk dataset, saya mengambil dari Kaggle , berikut link Dataset 
> [Pima Indians Diabetes Database](https://www.kaggle.com/uciml/pima-indians-diabetes-database)

### Data Loading
Untuk mempermudah dalam proses memahami data , saya melakukan proses loading data terlebih dahulu . 
1. Melakukan mounted drive ( untuk menghubungkan google colab dengan drive , karena saya menyimpan dataset pada file drive )
"""

#mounted drive karena data ada di google drive
from google.colab import drive
drive.mount('/content/drive')

"""* setelah itu import library - library yang dibutuhkan .

"""

# Commented out IPython magic to ensure Python compatibility.
#melakukan import library 
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns

print('done sar!')

"""* lalu membaca data dengan read_csv
* Memanggil dataframe dengan fungsi head() untuk membaca tabel data ,default dari fungsi head() akan menampilkan 5 baris data pada saat fungsi dieksekusi (di sini saya menamai dataframe dengan diabetes)
"""

#membaca dataframe dengan read_csv karena file berformat csv
diabetes = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/dataset/diabetes.csv')
diabetes.head()

"""- Menggunakan "data.columns" untuk mempermudah melihat nama - nama kolom """

#mengecek nama kolom
diabetes.columns

"""* mengubah nama kolom (rename), agar lebih mudah saat akan melakukan instruksi lainnya .

"""

#merubah nama kolom , agar lebih memudahkan 
diabetes = diabetes.rename(columns={'Pregnancies':'Kehamilan','Age':'Umur','Outcome':'Hasil','DiabetesPedigreeFunction':'PediFunction'})
diabetes.head()

"""- Selanjutnya mencari informasi tentang dataset mengenai jumlah baris data,kolom data ,serta tipe data . saya menggunakan fungsi shape"""

#mengecek berapakah column dan baris data
diabetes.shape

"""- Selanjutnya mencari informasi tentang dataset mengenai jumlah baris data,kolom data ,serta tipe data . saya menggunakan fungsi info()"""

#melakukan pengecekan info seputar dataframe
diabetes.info()

"""- Berikutnya memeriksa dataset untuk melihat apakah data memiliki nilai duplikat dengan menggunakan fungsi `diabetes.duplicated().sum()`"""

#mengecek apakah ada data yang duplikasi atau tidak
diabetes.duplicated().sum()

"""- melihat apakah data memiliki nilai null dengan fungsi isnull() ."""

#mengecek apakah ada data yang kosong 
diabetes.isnull().sum()

"""- Melihat informasi lebih lanjut mengenai data dengan menggunakan fungsi describe()"""

#melihat penjelasan mengenai dataframe
diabetes.describe()

"""Berdasarkan langkah - langkah di atas dapat diambil Informasi sebagai Berikut :
- Dataset memiliki 9 buah variabel .diantaranya, 
    - Pregnancies(Kehamilan) : Untuk menghitung berapa kali pasien pernah mengandung.
    - Glucose(glukosa) : Konsentrasi glukosa dalam rentang waktu 2 jam berdasarkan tes toleransi oral glukosa.
    - Blood Pressure(Tekanan Darah) : Tekanan darah diastolik (mm Hg).
    - Skin Thickness (Ketebalan Kulit) : Ketebalan kulit bagian trisep (mm).
    - Insulin : Tingkat insulin 2 jam insulin serum dalam satuan mu U/ml).
    - BMI : indeks massa tubuh (kg/m^2).
    - DiabetesPedigreeFunction : Indikator riwayat diabetes dalam keluarga
    - Age(Umur) : Usia wanita suku Indian pima (tahun).
    - Outcome(Hasil) : Kategori ,di mana 1 mempresentasikan nilai true (diabetes) dan 0 yang mempresentasikan nilai false (tidak memiliki diabetes).
- Dataset memiliki 768 baris dengan 9 Kolom.
- Terdapat 9 variabel , di mana 2 dari 9 variabel memiliki tipe float (BMI dan PediFunction) sedangkan sisanya memiliki tipe int.
- Tidak ada nilai yang berduplikat.
- Tidak ada nilai yang null.
- Jumlah tertinggi dari Kehamilan adalah sebanyak 17 kali , dan yang terendah adalah 0 ( tidak pernah mengalami kehamilan).
- glukosa memiliki nilai terendah 0 dengan nilai maksimal 199.
- Insulin memiliki nilai terendah 0 dengan nilai maksimal 846.
- Ketebalan Kulit dan BMI keduanya memiliki nilai terendah 0 .
- Tekanan darah memiliki nilai terendah 0 .
- Jangkauan umur yang ada pada pasien wanita adalah 21 tahun sampai 81 tahun.

Berdasarkan informasi di atas , terdapat beberapa informasi yang janggal . yaitu nilai terendah pada beberapa variabel seperti (BMI,Blood Pressure,Insulin ,Skin thickness). 
Nilai 0 pada beberapa variabel tersebut tidak memungkinkan . karena ,
1. Jika BMI seseorang 0 . maka dia tidak memiliki massa sama sekali .
2. Apabila tekanan darah 0 , aliran darah dalam tubuh tidak akan mengalir .
3. Tidak mungkin insulin dan ketebalan kulit memiliki nilai 0 .
Informasi janggal tersebut akan dipelajari lebih lanjut pada tahap exploratory data . guna mengambil tindakan apakah data akan di drop atau data dapat diganti dengan nilai yang lain .

- Menggunakan "data.columns" untuk mempermudah melihat nama - nama kolom
"""

diabetes.columns

"""berdasarkan observasi sebelumnya , selanjutnya saya melakukan


*   Pengecekan jumlah nilai 0 pada 7 variable , Kehamilan tidak termasuk karena 0 mempresentasikan seseorang yang tidak pernah hamil



"""

#melakukan pengecekan ada berapakah data yang memiliki nilai 0 pada setiap column
print('Jumlah baris yang memiliki nilai 0 pada Glukosa: {0}'.format(len(diabetes.loc[diabetes['Glucose'] == 0])))
print('Jumlah baris yang memiliki nilai 0 pada Tekanan Darah: {0}'.format(len(diabetes.loc[diabetes['BloodPressure'] == 0])))
print('Jumlah baris yang memiliki nilai 0 pada Insulin: {0}'.format(len(diabetes.loc[diabetes['Insulin'] == 0])))
print('Jumlah baris yang memiliki nilai 0 pada Ketebalan Kulit: {0}'.format(len(diabetes.loc[diabetes['SkinThickness'] == 0])))
print('Jumlah baris yang memiliki nilai 0 pada BMI: {0}'.format(len(diabetes.loc[diabetes['BMI'] == 0])))
print('Jumlah baris yang memiliki nilai 0 pada Diabetes Pedigree Function: {0}'.format(len(diabetes.loc[diabetes['PediFunction'] == 0])))
print('Jumlah baris yang memiliki nilai 0 pada Umur: {0}'.format(len(diabetes.loc[diabetes['Umur'] == 0])))

"""- Sebelum melakukan analisis korelasi pada data , saya berusaha melihat persebaran data"""

#melakukan pengecekan persebaran data
diabetes.hist(bins=50, figsize=(20,15))
plt.show()

"""*   Setelah itu melakukan Pengecekan Outliers pada setiap Kolom 

Outliers pada kolom Glucose
"""

#melihat outliner pada setiap columns
sns.boxplot(x=diabetes['Glucose'])

"""Outliers pada kolom BloodPressure"""

#melihat outliner pada setiap columns
sns.boxplot(x=diabetes['BloodPressure'])

"""Outliers pada kolom Insulin"""

#melihat outliner pada setiap columns
sns.boxplot(x=diabetes['Insulin'])

"""Outliers pada kolom SkinThickness"""

#melihat outliner pada setiap columns
sns.boxplot(x=diabetes['SkinThickness'])

"""Outliers pada kolom BMI"""

#melihat outliner pada setiap columns
sns.boxplot(x=diabetes['BMI'])

"""Outliers pada kolom PediFunction"""

#melihat outliner pada setiap columns
sns.boxplot(x=diabetes['PediFunction'])

"""Outliers pada kolom Umur"""

#melihat outliner pada setiap columns
sns.boxplot(x=diabetes['Umur'])

"""Setelah melihat grafik outliers secara keseluruhan . saya mendapatkan bahwa nilai 0 pada beberapa variable menjadi sebuah outliers pada dataset. Oleh sebab itu saya memilih untuk mengubah nilai 0 pada beberapa data variable dengan menggunakan nilai mean . sebab jika dilakukan drop secara menyeluruh maka dataset akan memiliki jumlah data yang terlalu sedikit (di bawah 500).

- Menggunakan "data.columns" untuk mempermudah melihat nama - nama kolom
"""

diabetes.columns

"""- Mengubah nilai 0 pada beberapa data variable dengan menggunakan nilai mean ."""

#mengganti 0 menjadi data mean nya
outcol=['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',
       'BMI']
for i in outcol:
    diabetes[i]=diabetes[i].replace(0,np.mean(sorted(diabetes[i])))
print('done sar')

"""- Melihat dataset diabetes"""

diabetes

"""- Menggunakan "data.columns" untuk mempermudah melihat nama - nama kolom """

diabetes.columns

"""- Melakukan drop outliers pada q1 dan q3 """

Q1 = diabetes.quantile(0.25)
Q3 = diabetes.quantile(0.75)
IQR=Q3-Q1
diabetes=diabetes[~((diabetes<(Q1-1.5*IQR))|(diabetes>(Q3+1.5*IQR))).any(axis=1)]
 
# Cek ukuran dataset setelah kita drop outliers
diabetes.shape

"""##### <center> Observasi </center>
Setelah dilakukan drop outliers saya melakukan pengecekan ukuran data kembali . <br>
terlihat bahwa data mengalami penurunan jumlah baris , dimana dari 768 baris menjadi 619 baris . <br>
dikarenakan ukuran data masih memenuhi syarat Submission yaitu 619 baris . saya melanjutkan projek dengan dataset ini.<br>
Langkah selanjutnya saya mengecek persebaran data tiap variable dan juga outliersnya kembali dengan visualisasi diagram

Outliers pada kolom Glucose
"""

#melihat outliner pada setiap columns
sns.boxplot(x=diabetes['Glucose'])

"""Outliers pada kolom BloodPressure"""

sns.boxplot(x=diabetes['BloodPressure'])

"""Outliers pada kolom Insulin"""

sns.boxplot(x=diabetes['Insulin'])

"""Outliers pada kolom SkinThickness"""

sns.boxplot(x=diabetes[ 'SkinThickness'])

"""- Melakukan visualisasi penyebaran data """

#melakukan pengecekan persebaran data
diabetes.hist(bins=50, figsize=(20,15))
plt.show()

"""- Menggunakan "data.columns" untuk mempermudah melihat nama - nama kolom """

diabetes.columns

"""#### <center> Exploratory Data </center><hr>
Pada tahap selanjutnya , saya membagi fitur dataset menjadi 2 bagian 
1. numerical feature
2. categorical feature


setelah itu saya melakukan pengecekan sample data berdasarkan variable "Hasil" dengan menggunakan diagram bar
"""

numerical_features = ['Kehamilan', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',
       'BMI', 'PediFunction', 'Umur']
categorical_features = ['Hasil']

"""- Menggunakan diagram sebagai visualisasi untuk melihat keseluruhan sampling data pada categorical features ."""

feature = categorical_features[0]
count = diabetes[feature].value_counts()
percent = 100*diabetes[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

"""##### <center> Observasi </center>
Berdasarkan diagram diatas ,<br>
jumlah sample dengan nilai 0(false) 426 dibandingkan dengan nilai 1(true) yang hanya 193 . <br>
dimana ini berarti ratio perbandingan data 60:30 dan data kurang seimbang

Selanjutnya saya melakukan Pengecekan terhadap fitur numerik

- Numerical features menggunakan correlation matrix
"""

plt.figure(figsize=(10, 8))
correlation_matrix = diabetes.corr().round(2)
# annot = True to print the values inside the square
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

"""##### <center> Observasi </center>
Berdasarkan Hasil Metrik diatas 


1.   Kehamilan dan Umur memiliki korelasi yang cukup berpengaruh
2.   ketebalan kulit dan BMI juga memiliki korelasi 
3.   Glukosa memiliki korelasi dengan pasien wanita yang memiliki diabetes

- Menggunakan fungsi paiplot untuk melihat apakah ada korelasi antar variable
"""

# mengamati hubungan antar fitur numerik dengan fungsi pairplot()
sns.pairplot(diabetes, diag_kind = 'kde')

"""##### <center> Observasi </center>
Berdasarkan diagram diatas , masih sedikit sama dengan matriks sebelum diagram .

didapatkan 

1.   Kehamilan dan Umur memiliki korelasi yang tinggi
2.   glukosa dan insulin memiliki korelasi
3.   Umur dan Blood Pressure(tekanan darah) memiliki korelasi
4.   SkinThickness dan BMI memiliki korelasi

- Diagram Bar ,guna melihat korelasi antara "Hasil" dengan setiap Variabel.
"""

for i,col in enumerate(diabetes.columns[:-1]):
    sns.catplot(x='Hasil', y=col, data=diabetes,kind="bar")
plt.show()

"""- Diagram Box ,guna mendapatkan informasi lebih jelas terkait rentang nilai korelasi antara "Hasil" dengan setiap variabel."""

for i,col in enumerate(diabetes.columns[:-1]):
    sns.catplot(x='Hasil', y=col, data=diabetes,kind="box")
plt.show()

"""-  Melakukan pengurutan nilai variable dengan menggunakan fungsi data.corr , serta nilai akan diururtkan secara ascending false . (untuk mengetahui nilai mana yang memiliki tingkat korelasi tertinggi sampai ke terendah)"""

#melakukan pengecekan korelasi variable dengan nilai urutan false
diabetes.corr()["Hasil"].sort_values(ascending=False)

"""- Melakukan perbandingan korelasi setiap variable berdasarkan nilai rata-rata variabel tersebut."""

#melakukan pengecekan korelasi dengan nilai rata - rata
diabetes.groupby('Hasil').mean()

"""##### <center> Observasi </center>
Berdasarkan Perbandingan dengan Diagram dan beberapa perhitungan lainnya , didapatkan kesimpulan 

1.   Semua Variabel memiliki korelasi terhadap kemungkinan mengidap diabetes .
2.   Pasien diabetes biasa ditemui pada pasien yang memiliki glukosa diatas 120 
3.   Kelebihan berat badan juga memiliki pengaruh cukup besar dalam kemungkinan memiliki diabetes , wanita yang memiliki BMI lebih dari 30 memiliki kemungkinan yang besar terkena diabetes  
4.   seseorang yang memiliki umur lebih dari 28 tahun memiliki kemungkinan terkena diabetes yang tinggi .
5.   Pasien yang memiliki diabetes dapat mencapai insulin dengan level lebih dari 125 bahkan lebih dari 150 juga bisa .
6.   Glukosa menjadi salah satu penyebab diabetes tertinggi . dilihat dari hasil presentase dan penyampaian diagram diatas . 
7.   Pasien yang telah beberapa kali Hamil juga memiliki resiko diabetes yang cukup tinggi .


Jika di ukur berdasarkan Peringkat , penyebab diabetes pada wanita diantaranya :
1. Glucose
2. BMI ( berat badan )
3. Umur
4. Kehamilan

#### <center> Data Pre Paration </center><hr>
Pada tahap ini ,saya melakukan pembagian data menjadi data training dan data tes .Untuk membagi data saya menggunakan train_test_split dari sklearn library . Data saya bagi dengan rasio 80:20, sehingga test_size bernilai 0.2 .
"""

from sklearn.model_selection import train_test_split
 
X = diabetes.drop(["Hasil"],axis =1)
y = diabetes["Hasil"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 2)

"""Lalu menghitung jumlah sample pada tiap data dengan fungsi len"""

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""Selanjutnya adalah melakukan Standarisasi , dimana proses ini dapat membantu  membuat fitur data menjadi bentuk yang nantinya akan lebih mudah diolah oleh algoritma . 

untuk mengindari kebocoran data pada data uji , standarisasi yang dilakukan sekarang hanya dilakukan pada data uji . untuk data test akan dilakukan nanti setelah evaluasi

Proses standarscaler dapat membuat mean menjadi 0 dan Standar deviasi menjadi 1
"""

from sklearn.preprocessing import StandardScaler
 
numerical_features = ['Kehamilan', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',
       'BMI', 'PediFunction', 'Umur']
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])
X_train[numerical_features].head()

"""- memastikan mean dan standar deviasi telah bernilai 0 dan 1"""

X_train[numerical_features].describe().round(4)

"""##### <center> Observasi </center>
Dapat dilihat karena menggunakan standarscaller pada data , mean pada data berubah menjadi 0 dan standar deviasinya menjadi 1

#### <center> Model Development </center><hr>
Pada tahap ini, saya akan mengembangkan model machine learning dengan 4 algoritma.


1. K-Nearest Neighbor
2. Random Forest
3. Boosting Algorithm
4. Support Vector Machine

di mana tahap 1-3 nanti , saya akan mengevaluasi performa masing-masing algoritma dan menentukan algoritma mana yang dapat memberikan hasil prediksi terbaik .Dengan pendekatan model yang memiliki nilai paling mendekati dengan nilai asli .
 
Pada algoritma ke -4 ,saya melakukan evaluasi dengan menggunakan sistem nilai akurasi ,untuk  memastikan apakah model SVM dapat menghasilkan nilai akurasi yang tinggi ketika memprediksi dataset.

- Membuat dataframe untuk analisis model
"""

# Siapkan daraframe untuk analisis model
models = pd.DataFrame(index=['train_mse', 'test_mse'], 
                      columns=['KNN', 'RandomForest', 'Boosting'])

"""Membuat code untuk melakukan pelatihan dengan KNN<br>
Pertama import library yang dibutuhkan,
saya menggunakan k = 10 tetangga dan metric Euclidean untuk mengukur jarak antara titik.<br> data yang di pakai sekarang adalah data latih .
"""

from sklearn.neighbors import KNeighborsRegressor
 
knn = KNeighborsRegressor(n_neighbors=10)
knn.fit(X_train, y_train)
y_pred_knn = knn.predict(X_train)

"""Membuat code untuk pelatihan dengan Random Forest <br>
Pertama melakukan import library yang dibutuhkan , lalu untuk model prediksi . saya menggunakan max_depth = 16 , random_state = 55 , estimasi nya 50 .
"""

# Impor library yang dibutuhkan
from sklearn.metrics import mean_squared_error
from sklearn.ensemble import RandomForestRegressor
 
# buat model prediksi
RF = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=55, n_jobs=-1)
RF.fit(X_train, y_train)
 
models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=RF.predict(X_train), y_true=y_train)

"""Berikutnya membuat Code untuk model Prediksi Boosting<br>

"""

from sklearn.ensemble import AdaBoostRegressor
 
boosting = AdaBoostRegressor(n_estimators=50, learning_rate=0.05, random_state=55)                             
boosting.fit(X_train, y_train)
models.loc['train_mse','Boosting'] = mean_squared_error(y_pred=boosting.predict(X_train), y_true=y_train)

"""#### <center> Evaluasi Model </center><hr>

Pada tahap ini yang pertama saya lakukan adalah melakukan scaling pada data uji , seperti yang diberitahukan pada tahap standarisasi , bahwa data uji akan dilakukan standarisasi pada tahap evaluasi untuk menghindari kebocoran data pada data latih . 
"""

## Scalling numerikal fitur agar nilai meannya 0 dan variance nya 1
X_test.loc[:, numerical_features] = scaler.transform(X_test[numerical_features])

"""Melakukan evaluasi model dengan metrik MSE"""

mse = pd.DataFrame(columns=['train', 'test'], index=['KNN','RF','Boosting'])
model_dict = {'KNN': knn, 'RF': RF, 'Boosting': boosting}
for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e3 
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e3
 
mse

"""- Menampilkan hasil MSE dalam visualisasi plot bar ."""

fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

"""- Membuat kode predik untuk melakukan perbandingan nilai menggunakan 3 buah model algoritma """

prediksi = X_test.iloc[:5].copy()
pred_dict = {'y_true':y_test[:5]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)
 
pd.DataFrame(pred_dict)

"""- menghitung rata - rata nilai MSE pada data test"""

mean2=(0.000149262+0.000162284+0.000157419)/3
mean2

"""##### <center> Observasi </center>
Berdasarkan Hasil eksekusi diatas didapatkan informasi bahwa untuk diagram bar mse terlihat bahwa yang memiliki error terkecil adalah boosting pada data test , namun saat dilakukan predict terlihat bahwa prediksi KNN lebih dekat dengan nilai asli . 
ketidak sinkronan ini cukup dapat diterima karena mungkin dataset yang dipakai terlalu sedikit sehingga mengalami hal seperti ini . Namun untuk mencoba mencari yang mendekati disini saya mencoba menggunakan rata - rata ketiga nilai mse pada data test dan di dapatkan hasil 0.00015632166666666668 . dimana ini lebih dekat dengan nilai mse pada model KNN . 

oleh sebab itu diantara ketiga model ini KNN bisa menjadi salah satu solusi .

Selanjutnya sesuai penjelasan sebelumnya , Saya akan coba menggunakan SVM untuk mengetahui score akurasi pada prediksi merdasarkan model SVM .



1.   Saya membuat dataframe baru dengan cara di kopi( dimana isinya sama dengan data diabetes) alasannya untuk menghindari apabila ada kesalahan data yang utama tidak akan terganggu.
"""

diabetes2=diabetes.copy()

"""2. Mengurutkan nilai pada variabel Hasil"""

diabetes2.corr()["Hasil"].sort_values(ascending=False)

"""
3.   membuat Variable S dan r dimana ini masih sama seperti pada X dan y di data diabetes sebelumnya
"""

S=diabetes2.drop(['Hasil'],axis=1)
r=diabetes2['Hasil']

"""
4.   lalu melakukan standarisasi data pada data uji dan merubahnya ke dalam bentuk array dengan fit.transform
"""

Scaler = StandardScaler()
StandardizedData = Scaler.fit_transform(S)
print(StandardizedData)

"""
5.   Hasil dari standarisasi saya deklarasikan menjadi P
"""

P = StandardizedData

"""
6.   Membagi dataset menjadi training dan test dengan parameter yang sama seperti sebelumnya yaitu test_size 0.2 dan random_state 2"""

P_train, P_test, r_train, r_test = train_test_split(P,r,test_size = 0.2, random_state = 2)

"""- Menggunakan fungsi shape untuk mengetahui jumlah data pada tiap sub data"""

print(P.shape)
print(P_train.shape)
print(P_test.shape)

"""<center> Observasi </center>
dari sini diketahui bahwa data sample memiliki jumlah 619 baris dengan data latih berjumlah 495 baris dan data uji bernilai 124 baris.

Selanjutnya Import library yang dibutuhkan lalu membuat code untuk melatih data dengan model SVM
"""

from sklearn import svm
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler
model = svm.SVC(kernel='linear')
model.fit(P_train,r_train)

"""Melakukan predict pada data Latih"""

train_pred = model.predict(P_train)
train_pred

"""- Menghitung nilai akurasi data latih """

Training_score = accuracy_score(train_pred,r_train)
print("Accuracy Score:",Training_score)

"""<center> Observasi </center>
pada data latih didapatkan nilai akurasi sebesar 0.79

Selanjutnya melakukan prediksi pada data Uji untuk mengetahui nilai akurasi pada data uji
"""

test_pred = model.predict(P_test)
test_pred

Test_score = accuracy_score(test_pred,r_test) 
print("Accuracy Score:",Test_score)

"""<center> Observasi </center>
Pada data Uji didapatkan Nilai akurasi sebesar 0.80 .

Berdasarkan proyek machine learning ini di dapatkan kesimpulan bahwa untuk 4 urutan faktor tertinggi penyebab diabetes pada pasien wanita  adalah 


1.   Glucose
2.   BMI ( berat badan )
3.   Umur
4.   Kehamilan

Lalu untuk model prediksi terbaik yang dapat digunakan pada proyek ini adalah dengan model prediksi KNN (K-Nearest Neighbor) . atau bisa juga dengan menggunakan Model prediksi SVM (support vector machine) karena model ini juga menghasilkan skor akurasi yang cukup tinggi yaitu 0.80
"""